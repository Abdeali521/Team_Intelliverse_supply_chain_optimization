import numpy as np
from scipy.optimize import linprog

def supply_chain_optimization():
    # Input: Number of warehouses and retail locations
    num_warehouses = int(input("Enter the number of warehouses: "))
    num_retailers = int(input("Enter the number of retail locations: "))

    # Input: Transportation cost matrix (size: num_warehouses x num_retailers)
    print("Enter the transportation cost matrix (rows = warehouses, columns = retail locations):")
    transportation_cost = []
    for i in range(num_warehouses):
        row = list(map(float, input(f"Enter costs from warehouse {i+1} to each retailer (separated by spaces): ").split()))
        transportation_cost.append(row)

    # Input: Inventory cost for each warehouse
    print("Enter the inventory cost at each warehouse:")
    inventory_cost = []
    for i in range(num_warehouses):
        cost = float(input(f"Enter inventory cost at warehouse {i+1}: "))
        inventory_cost.append(cost)

    # Input: Demand for each retailer
    print("Enter the demand for each retail location:")
    demand = list(map(int, input("Enter demand for each retailer (separated by spaces): ").split()))

    # Supply (inventory at each warehouse)
    supply = list(map(int, input("Enter the supply (inventory) at each warehouse (separated by spaces): ").split()))

    # Decision variable: amount to be shipped from warehouse i to retailer j
    c = []  # Objective function: costs to minimize
    for i in range(num_warehouses):
        for j in range(num_retailers):
            c.append(transportation_cost[i][j])

    # Constraints: Supply and demand constraints
    A_eq = []
    b_eq = []

    # Supply constraints (sum of shipments from each warehouse should not exceed the supply)
    for i in range(num_warehouses):
        row = [0] * (num_warehouses * num_retailers)
        for j in range(num_retailers):
            row[i * num_retailers + j] = 1
        A_eq.append(row)
        b_eq.append(supply[i])

    # Demand constraints (sum of shipments to each retailer should meet the demand)
    for j in range(num_retailers):
        row = [0] * (num_warehouses * num_retailers)
        for i in range(num_warehouses):
            row[i * num_retailers + j] = 1
        A_eq.append(row)
        b_eq.append(demand[j])

    # Bounds: shipments should be non-negative
    bounds = [(0, None)] * (num_warehouses * num_retailers)

    # Solve the linear programming problem
    result = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')

    if result.success:
        print("\nOptimal Solution:")
        print("Shipment amounts from each warehouse to each retailer:")
        shipment_matrix = np.array(result.x).reshape(num_warehouses, num_retailers)
        for i in range(num_warehouses):
            for j in range(num_retailers):
                print(f"Warehouse {i+1} -> Retailer {j+1}: {shipment_matrix[i][j]:.2f} units")

        # Calculate total cost (including inventory cost)
        total_cost = np.sum(np.array(result.x).reshape(num_warehouses, num_retailers) * transportation_cost)
        inventory_cost_total = sum(np.array(supply) * np.array(inventory_cost))

        print(f"\nTotal transportation cost: {total_cost:.2f}")
        print(f"Total inventory cost: {inventory_cost_total:.2f}")
        print(f"Total cost (Transportation + Inventory): {total_cost + inventory_cost_total:.2f}")
    else:
        print("Optimization failed. Check constraints or inputs.")

# Run the optimization function
supply_chain_optimization()
