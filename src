import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Function to analyze logistics data and identify inefficiencies
def analyze_supply_chain(locations, transportation_costs, delivery_times, resource_allocation):
    # Convert inputs into pandas DataFrame
    data = pd.DataFrame({
        'Location': locations,
        'Transportation Cost': transportation_costs,
        'Delivery Time (hrs)': delivery_times,
        'Resources Used': resource_allocation
    })
    
    print("\n--- Input Data ---")
    print(data)
    
    # Calculate inefficiencies
    avg_cost = np.mean(data['Transportation Cost'])
    avg_time = np.mean(data['Delivery Time (hrs)'])
    avg_resources = np.mean(data['Resources Used'])
    
    print("\n--- Analysis ---")
    print(f"Average Transportation Cost: {avg_cost:.2f}")
    print(f"Average Delivery Time: {avg_time:.2f} hrs")
    print(f"Average Resources Used: {avg_resources:.2f}")
    
    # Identify inefficiencies
    inefficiencies = data[(data['Transportation Cost'] > avg_cost) | 
                          (data['Delivery Time (hrs)'] > avg_time) | 
                          (data['Resources Used'] > avg_resources)]
    
    print("\n--- Inefficiencies Found ---")
    if not inefficiencies.empty:
        print(inefficiencies)
    else:
        print("No inefficiencies found.")
    
    # Optimize resource allocation
    optimized_allocation = data.copy()
    optimized_allocation['Optimized Resources'] = avg_resources - (optimized_allocation['Resources Used'] - avg_resources) * 0.5
    optimized_allocation['Optimized Resources'] = optimized_allocation['Optimized Resources'].clip(lower=0)
    
    print("\n--- Optimized Resource Allocation ---")
    print(optimized_allocation[['Location', 'Resources Used', 'Optimized Resources']])
    
    # Visualization
    plot_data(data, avg_cost, avg_time, avg_resources, optimized_allocation)
    
    return optimized_allocation

# Function to generate visualizations
def plot_data(data, avg_cost, avg_time, avg_resources, optimized_allocation):
    # Bar plot of transportation costs
    plt.figure(figsize=(12, 6))
    plt.subplot(1, 2, 1)
    plt.bar(data['Location'], data['Transportation Cost'], color='blue', alpha=0.7, label='Transportation Cost')
    plt.axhline(avg_cost, color='red', linestyle='--', label='Average Cost')
    plt.title('Transportation Costs per Location')
    plt.ylabel('Cost ($)')
    plt.legend()
    
    # Scatter plot for resources vs. optimized resources
    plt.subplot(1, 2, 2)
    plt.scatter(data['Location'], data['Resources Used'], color='green', label='Resources Used')
    plt.scatter(data['Location'], optimized_allocation['Optimized Resources'], color='orange', label='Optimized Resources')
    plt.title('Resource Allocation Optimization')
    plt.ylabel('Resources')
    plt.legend()
    
    # Show plots
    plt.tight_layout()
    plt.show()

# Example Inputs
locations = input("Enter locations separated by commas: ").split(',')
transportation_costs = list(map(float, input("Enter transportation costs (comma-separated): ").split(',')))
delivery_times = list(map(float, input("Enter delivery times (in hours, comma-separated): ").split(',')))
resource_allocation = list(map(float, input("Enter resources used (comma-separated): ").split(',')))

# Call function
optimized_allocation = analyze_supply_chain(locations, transportation_costs, delivery_times, resource_allocation)
