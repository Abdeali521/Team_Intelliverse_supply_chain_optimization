{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Abdeali521/Team_Intelliverse_supply_chain_optimization/blob/main/source%20code\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q1praLso0Txb",
        "outputId": "18b10f0f-9423-44ef-f02f-ee6309144666"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimal Order Quantity (EOQ): 707.11 units\n",
            "Total Inventory Cost: $1414.21\n"
          ]
        }
      ],
      "source": [
        "import math\n",
        "\n",
        "# Function to calculate EOQ\n",
        "def calculate_eoq(demand, order_cost, holding_cost):\n",
        "    \"\"\"\n",
        "    Calculate Economic Order Quantity (EOQ)\n",
        "\n",
        "    :param demand: Annual demand (units)\n",
        "    :param order_cost: Ordering cost per order\n",
        "    :param holding_cost: Holding cost per unit per year\n",
        "    :return: EOQ (optimal order quantity)\n",
        "    \"\"\"\n",
        "    eoq = math.sqrt((2 * demand * order_cost) / holding_cost)\n",
        "    return eoq\n",
        "\n",
        "# Function to calculate total cost (ordering cost + holding cost)\n",
        "def total_inventory_cost(demand, order_cost, holding_cost, eoq):\n",
        "    \"\"\"\n",
        "    Calculate the total cost of inventory, including ordering and holding costs.\n",
        "\n",
        "    :param demand: Annual demand (units)\n",
        "    :param order_cost: Ordering cost per order\n",
        "    :param holding_cost: Holding cost per unit per year\n",
        "    :param eoq: Economic Order Quantity\n",
        "    :return: Total inventory cost\n",
        "    \"\"\"\n",
        "    # Number of orders per year (demand / eoq)\n",
        "    num_orders = demand / eoq\n",
        "    # Average inventory level (EOQ / 2)\n",
        "    avg_inventory = eoq / 2\n",
        "    # Total cost (ordering cost + holding cost)\n",
        "    total_cost = (num_orders * order_cost) + (avg_inventory * holding_cost)\n",
        "    return total_cost\n",
        "\n",
        "# Example values\n",
        "demand = 10000  # Units per year\n",
        "order_cost = 50  # Cost per order\n",
        "holding_cost = 2  # Cost per unit per year\n",
        "\n",
        "# Calculate EOQ\n",
        "eoq = calculate_eoq(demand, order_cost, holding_cost)\n",
        "print(f\"Optimal Order Quantity (EOQ): {eoq:.2f} units\")\n",
        "\n",
        "# Calculate total inventory cost\n",
        "inventory_cost = total_inventory_cost(demand, order_cost, holding_cost, eoq)\n",
        "print(f\"Total Inventory Cost: ${inventory_cost:.2f}\")\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy.optimize import linprog\n",
        "\n",
        "def supply_chain_optimization():\n",
        "    # Input: Number of warehouses and retail locations\n",
        "    num_warehouses = int(input(\"Enter the number of warehouses: \"))\n",
        "    num_retailers = int(input(\"Enter the number of retail locations: \"))\n",
        "\n",
        "    # Input: Transportation cost matrix (size: num_warehouses x num_retailers)\n",
        "    print(\"Enter the transportation cost matrix (rows = warehouses, columns = retail locations):\")\n",
        "    transportation_cost = []\n",
        "    for i in range(num_warehouses):\n",
        "        row = list(map(float, input(f\"Enter costs from warehouse {i+1} to each retailer (separated by spaces): \").split()))\n",
        "        transportation_cost.append(row)\n",
        "\n",
        "    # Input: Inventory cost for each warehouse\n",
        "    print(\"Enter the inventory cost at each warehouse:\")\n",
        "    inventory_cost = []\n",
        "    for i in range(num_warehouses):\n",
        "        cost = float(input(f\"Enter inventory cost at warehouse {i+1}: \"))\n",
        "        inventory_cost.append(cost)\n",
        "\n",
        "    # Input: Demand for each retailer\n",
        "    print(\"Enter the demand for each retail location:\")\n",
        "    demand = list(map(int, input(\"Enter demand for each retailer (separated by spaces): \").split()))\n",
        "\n",
        "    # Supply (inventory at each warehouse)\n",
        "    supply = list(map(int, input(\"Enter the supply (inventory) at each warehouse (separated by spaces): \").split()))\n",
        "\n",
        "    # Decision variable: amount to be shipped from warehouse i to retailer j\n",
        "    c = []  # Objective function: costs to minimize\n",
        "    for i in range(num_warehouses):\n",
        "        for j in range(num_retailers):\n",
        "            c.append(transportation_cost[i][j])\n",
        "\n",
        "    # Constraints: Supply and demand constraints\n",
        "    A_eq = []\n",
        "    b_eq = []\n",
        "\n",
        "    # Supply constraints (sum of shipments from each warehouse should not exceed the supply)\n",
        "    for i in range(num_warehouses):\n",
        "        row = [0] * (num_warehouses * num_retailers)\n",
        "        for j in range(num_retailers):\n",
        "            row[i * num_retailers + j] = 1\n",
        "        A_eq.append(row)\n",
        "        b_eq.append(supply[i])\n",
        "\n",
        "    # Demand constraints (sum of shipments to each retailer should meet the demand)\n",
        "    for j in range(num_retailers):\n",
        "        row = [0] * (num_warehouses * num_retailers)\n",
        "        for i in range(num_warehouses):\n",
        "            row[i * num_retailers + j] = 1\n",
        "        A_eq.append(row)\n",
        "        b_eq.append(demand[j])\n",
        "\n",
        "    # Bounds: shipments should be non-negative\n",
        "    bounds = [(0, None)] * (num_warehouses * num_retailers)\n",
        "\n",
        "    # Solve the linear programming problem\n",
        "    result = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')\n",
        "\n",
        "    if result.success:\n",
        "        print(\"\\nOptimal Solution:\")\n",
        "        print(\"Shipment amounts from each warehouse to each retailer:\")\n",
        "        shipment_matrix = np.array(result.x).reshape(num_warehouses, num_retailers)\n",
        "        for i in range(num_warehouses):\n",
        "            for j in range(num_retailers):\n",
        "                print(f\"Warehouse {i+1} -> Retailer {j+1}: {shipment_matrix[i][j]:.2f} units\")\n",
        "\n",
        "        # Calculate total cost (including inventory cost)\n",
        "        total_cost = np.sum(np.array(result.x).reshape(num_warehouses, num_retailers) * transportation_cost)\n",
        "        inventory_cost_total = sum(np.array(supply) * np.array(inventory_cost))\n",
        "\n",
        "        print(f\"\\nTotal transportation cost: {total_cost:.2f}\")\n",
        "        print(f\"Total inventory cost: {inventory_cost_total:.2f}\")\n",
        "        print(f\"Total cost (Transportation + Inventory): {total_cost + inventory_cost_total:.2f}\")\n",
        "    else:\n",
        "        print(\"Optimization failed. Check constraints or inputs.\")\n",
        "\n",
        "# Run the optimization function\n",
        "supply_chain_optimization()\n"
      ],
      "metadata": {
        "id": "YzUDFHC103fL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "eec37518-86f5-42cb-fce8-44de42ef3e9b"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the number of warehouses: 2\n",
            "Enter the number of retail locations: 3\n",
            "Enter the transportation cost matrix (rows = warehouses, columns = retail locations):\n",
            "Enter costs from warehouse 1 to each retailer (separated by spaces): 4 6 8\n",
            "Enter costs from warehouse 2 to each retailer (separated by spaces): 5 7 3\n",
            "Enter the inventory cost at each warehouse:\n",
            "Enter inventory cost at warehouse 1: 2\n",
            "Enter inventory cost at warehouse 2: 3\n",
            "Enter the demand for each retail location:\n",
            "Enter demand for each retailer (separated by spaces): 10 15 20\n",
            "Enter the supply (inventory) at each warehouse (separated by spaces): 20 30\n",
            "Optimization failed. Check constraints or inputs.\n"
          ]
        }
      ]
    }
  ]
}